# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# Install Script for LDAP on IBM ROKS Cloud
#
# V1.0 
#
# Â©2020 nikh@ch.ibm.com
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
BLUE='\033[1;34m'
RED='\033[0;31m'
NC='\033[0m' # No Color



# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# Default Values
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"

export LDAP_DOMAIN=local.io
export LDAP_ADMIN_PASSWORD=passw0rd
export LDAP_USER_GROUPS=mcm
export LDAP_USER=mcm
export LDAP_USER_PASSWORD=passw0rd

export OCP_CONSOLE_PREFIX=console-openshift-console


# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# Do Not Edit Below
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
echo "${GREEN}*************************************************************************************************************************************${NC}"
echo "${GREEN}*************************************************************************************************************************************${NC}"
echo "${GREEN}*************************************************************************************************************************************${NC}"
echo "  "
echo " ${GREEN}Install for OPEN LDAP${NC}"
echo "  "
echo "${GREEN}*************************************************************************************************************************************${NC}"
echo "${GREEN}*************************************************************************************************************************************${NC}"
echo "${GREEN}*************************************************************************************************************************************${NC}"
echo "  "
echo "  "
echo "  "



# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# GET PARAMETERS
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo " ${BLUE}Input Parameters${NC}"
echo "---------------------------------------------------------------------------------------------------------------------------"


while getopts "d:c:p:" opt
do
   case "$opt" in
      d ) INPUT_PATH="$OPTARG" ;;
      c ) INPUT_CLUSTER_NAME="$OPTARG" ;;
      p ) INPUT_PWD="$OPTARG" ;;
      * ) echo "    USAGE: ./install_template.sh -p <LDAP_ADMIN_PASSWORD> [-c <CLUSTER_NAME>] [-d <TEMP_DIRECTORY>] [-h]"; exit 2; ;;
      
   esac
done



if [[ $INPUT_PWD == "" ]];          
then
   echo "    USAGE: ./install_template.sh -p <LDAP_ADMIN_PASSWORD> [-c <CLUSTER_NAME>] [-d <TEMP_DIRECTORY>] [-h]"
    exit 1
else
  echo "    ${GREEN}Password OK:${NC}                        '$INPUT_PWD'"
  LDAP_ADMIN_PASSWORD=$INPUT_PWD
fi



if [[ ($INPUT_CLUSTER_NAME == "") ]];
then
  echo "    ${ORANGE}No Cluster Name provided${NC}            ${GREEN}will be determined from Cluster${NC}"
else
  echo "    ${GREEN}Cluster OK:${NC}                           '$INPUT_CLUSTER_NAME'"
  CLUSTER_NAME=$INPUT_CLUSTER_NAME
fi



if [[ $INPUT_PATH == "" ]];
then
  echo "    ${ORANGE}No Path provided, using${NC}             '$TMPDIR'"
  TEMP_PATH=$TMPDIR
else
  echo "    ${GREEN}Path OK:${NC}                            '$INPUT_PATH'"
  TEMP_PATH=$INPUT_PATH
fi




if [[ ($INPUT_CLUSTER_NAME == "") ]];
then
  echo "  "
  echo "---------------------------------------------------------------------------------------------------------------------------"
  echo " ${BLUE}Determining Cluster FQN${NC}"
  echo "---------------------------------------------------------------------------------------------------------------------------"
    CLUSTER_ROUTE=$(kubectl get routes console -n openshift-console | tail -n 1 2>&1 ) 
    if [[ $CLUSTER_ROUTE =~ "reencrypt" ]];
    then
      CLUSTER_FQDN=$( echo $CLUSTER_ROUTE | awk '{print $2}')
      if [[ $(uname) =~ "Darwin" ]];
      then
          CLUSTER_NAME=$(echo $CLUSTER_FQDN | sed -e "s/$OCP_CONSOLE_PREFIX.//")
      else
          CLUSTER_NAME=$(echo $CLUSTER_FQDN | sed "s/$OCP_CONSOLE_PREFIX.//")
      fi
      echo "    ${GREEN}Cluster FQDN:${NC}                        '$CLUSTER_NAME'"

    else
      echo "    ${RED}Cannot determine Route${NC}"
      echo "    ${ORANGE}Check your Kubernetes Configuration${NC}"
      echo "    ${RED}Aborting${NC}"
      exit 1
    fi
fi


echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"

echo "  "
echo "  "
echo "  "
echo "  "

# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# PRE-INSTALL CHECKS
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo " ${BLUE}Pre-Install Checks${NC}"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"

echo "    Check if ${BLUE}OpenShift${NC} is reachable at               $CONSOLE_URL"

PING_RESOLVE=$(ping -c 1 $CONSOLE_URL 2>&1)


if [[ $PING_RESOLVE =~ "cannot resolve" ]];
then
  echo "    ${RED}ERROR${NC}: Cluster '$CLUSTER_NAME' is not reachable"
  exit 1
else 
  echo "    ${GREEN}OK${NC}"
fi



echo "    Check if OpenShift ${BLUE}KUBECONTEXT${NC} is set for        $CLUSTER_NAME"

KUBECTX_RESOLVE=$(kubectl get routes --all-namespaces 2>&1)


if [[ $KUBECTX_RESOLVE =~ $CLUSTER_NAME ]];
then
  echo "    ${GREEN}OK${NC}"
else 
  echo "    ${RED}ERROR${NC}: Please log into  '$CLUSTER_NAME' via the OpenShift web console"
  exit 1
fi




echo "    Check ${BLUE}HELM${NC} Version (must be 2.x)"

HELM_RESOLVE=$($HELM_BIN version 2>&1)

if [[ $HELM_RESOLVE =~ "v2." ]];
then
  echo "    ${GREEN}OK${NC}"
else 
  echo "    ${ORANGE}WARNING${NC}: Wrong Helm Version ($HELM_RESOLVE)"
  echo "    ${ORANGE}Trying 'helm2'"

  export HELM_BIN=helm2
  HELM_RESOLVE=$($HELM_BIN version 2>&1)

  if [[ $HELM_RESOLVE =~ "v2." ]];
  then
   echo "    ${GREEN}OK${NC}"
  else 
    echo "    ${RED}ERROR${NC}: Helm Version 2 does not exist in your Path"
    echo "    Please install from https://icp-console.$CLUSTER_NAME/common-nav/cli?useNav=multicluster-hub-nav-nav"
    echo "     or run"
    echo "    curl -sL https://ibm.biz/idt-installer | bash"
    exit 1
  fi
fi



echo "    Check if ${BLUE}cloudctl${NC} Command Line Tool is available"

CLOUDCTL_RESOLVE=$(cloudctl 2>&1)

if [[ $CLOUDCTL_RESOLVE =~ "USAGE" ]];
then
  echo "    ${GREEN}OK${NC}"
else 
  echo "    ${RED}ERROR${NC}: cloudctl Command Line Tool does not exist in your Path"
  echo "    Please install from https://icp-console.$CLUSTER_NAME/common-nav/cli?useNav=multicluster-hub-nav-nav"
  echo "     or run"
  echo "    curl -sL https://ibm.biz/idt-installer | bash"
  exit 1
fi



echo "    Check if ${BLUE}Helm Chart${NC} is already installed"

#HELM_RESOLVE=$($HELM_BIN list --tls 2>&1)
HELM_RESOLVE=openl234dap

if [[ $HELM_RESOLVE =~ "openldap" ]];
then
  echo "    ${RED}ERROR${NC}: Helm Chart already installed"
  read -p "       UNINSTALL? [y,N]" DO_COMM
  if [[ $DO_COMM == "y" ||  $DO_COMM == "Y" ]]; then
    $HELM_BIN delete openldap --purge --tls
    echo "    ${GREEN}OK${NC}"
  else
    echo "    ${RED}Installation aborted${NC}"
    exit 2
  fi
else 
  echo "    ${GREEN}OK${NC}"
fi

echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"


echo "  "
echo "  "
echo "  "
echo "  "



# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# PRE-INSTALL PARAMETERS
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if [[ $(uname) =~ "Darwin" ]];
then
    BASE_DN="dc="$(echo $LDAP_DOMAIN | sed -e "s/\./,dc=/")
else
    BASE_DN="dc="$(echo $CLUSTLDAP_DOMAINER_FQDN | sed "s/\./,dc=/")
fi


BIND_DN="cn=admin,"$BASE_DN



echo "${GREEN}---------------------------------------------------------------------------------------------------------------------------${NC}"
echo "-${GREEN}--------------------------------------------------------------------------------------------------------------------------${NC}"
echo " ${BLUE}Your configuration${NC}"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "    ${GREEN}CLUSTER :${NC}                    $CLUSTER_NAME"
echo "    ${GREEN}TEMP PATH:${NC}                   $TEMP_PATH"
echo "    ${BLUE}LDAP Parameters for admin user (change these in install_ldap.sh)${NC}"
echo "      ${GREEN}LDAP_DOMAIN :${NC}              $LDAP_DOMAIN"
echo "      ${GREEN}BASE_DN :${NC}                  $BASE_DN"
echo "      ${GREEN}BIND_DN :${NC}                  $BIND_DN"
echo "      ${GREEN}LDAP_ADMIN_PASSWORD :${NC}      $LDAP_ADMIN_PASSWORD"
echo "    ${BLUE}Additional User (change these in install_ldap.sh)${NC}"
echo "      ${GREEN}LDAP_USER_GROUP :${NC}          $LDAP_USER_GROUPS"
echo "      ${GREEN}LDAP_USER :${NC}                $LDAP_USER"
echo "      ${GREEN}LDAP_USER_PASSWORD :${NC}       $LDAP_USER_PASSWORD"
echo "${GREEN}---------------------------------------------------------------------------------------------------------------------------${NC}"
echo "${GREEN}---------------------------------------------------------------------------------------------------------------------------${NC}"


echo "  "
echo "  "
echo "  "
echo "  "

echo "${GREEN}---------------------------------------------------------------------------------------------------------------------------${NC}"
echo "${GREEN}---------------------------------------------------------------------------------------------------------------------------${NC}"
echo "${RED}Continue Installation with these Parameters? [y,N]${NC}"
echo "${GREEN}---------------------------------------------------------------------------------------------------------------------------${NC}"
echo "${GREEN}---------------------------------------------------------------------------------------------------------------------------${NC}"
read -p "[y,N]" DO_COMM
if [[ $DO_COMM == "y" ||  $DO_COMM == "Y" ]]; then
  echo "${GREEN}Continue...${NC}"
else
  echo "${RED}Installation Aborted${NC}"
  exit 2
fi


# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# INSTALL PREREQUISITES
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo " ${BLUE}Installing Prerequisites${NC} - ${ORANGE}This may take some time${NC}"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "  "
echo "  "

oc adm policy add-scc-to-user anyuid -z default -n root

echo "  "
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo " ${GREEN}Prerequisites done${NC}"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"


echo "  "
echo "  "
echo "  "
echo "  "


echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo " ${BLUE}Installing Open Ldap${NC}"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"


echo "Install OpenLDAP Helm Chart"
$HELM_BIN install --name openldap ./openldap  \
    --set-string OpenLdap.Domain=$LDAP_DOMAIN \
    --set-string OpenLdap.AdminPassword=$LDAP_ADMIN_PASSWORD \
    --set-string OpenLdap.SeedUsers.usergroup=$LDAP_USER_GROUPS \
    --set-string OpenLdap.SeedUsers.userlist=$LDAP_USER \
    --set-string OpenLdap.SeedUsers.passw0rd=$LDAP_USER_PASSWORD \
    --set-string OpenLdap.Route=$CLUSTER_NAME \
    --tls




  read -p "Load some example users and groups? [y,N]" DO_COMM
  if [[ $DO_COMM == "y" ||  $DO_COMM == "Y" ]]; then
    echo "---------------------------------------------------------------------------------------------------------------------------"
    echo "---------------------------------------------------------------------------------------------------------------------------"
    echo " ${ORANGE}Loading examples${NC}"
    echo ""
    echo "---------------------------------------------------------------------------------------------------------------------------"
    echo "---------------------------------------------------------------------------------------------------------------------------"

    echo "Waiting for OpenLdap Pod to become Ready..."
    kubectl wait --for=condition=Ready pods -l app=openldap -n default
    
    echo "Waiting 10s to let it initialize..."
    sleep 10
    echo "ldapadd -x -D $BIND_DN -w $LDAP_ADMIN_PASSWORD -H ldap://openldap-default.$CLUSTER_NAME:32314 -f ./import.ldif"

    ldapadd -x -D "$BIND_DN" -w $LDAP_ADMIN_PASSWORD -H ldap://openldap-default.$CLUSTER_NAME:32314 -f ./import.ldif

  else
    echo "${RED}Examples not loaded${NC}"
  fi


echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo " ${BLUE}Login to PHP LDAP Admin${NC}"
echo "   GUI is here: http://openldap-admin-default.$CLUSTER_NAME"
echo ""
echo "   $BIND_DN"
echo "   $LDAP_ADMIN_PASSWORD"
echo ""
echo ""
echo " ${BLUE}Configuration for MCM${NC}"
echo "   Server type: Custom"
echo "   Base DN: $BASE_DN"
echo "   Bind DN: $BIND_DN"
echo "   URL: ldap://openldap.default:389"
echo ""
echo "   User filter: (&(uid=%v)(objectclass=Person))"
echo ""
echo ""
echo ""
echo "To Delete"
echo "  helm2 delete openldap --purge --tls"
echo ""
echo ""
echo "${GREEN}*************************************************************************************************************************************${NC}"
echo "${GREEN}*************************************************************************************************************************************${NC}"
echo " ${GREEN}DONE${NC}"
echo "${GREEN}*************************************************************************************************************************************${NC}"
echo "${GREEN}*************************************************************************************************************************************${NC}"
